[["index.html", "Juvenile River Herring: Diet, habitat, and food resources from the Connecticut River Chapter 1 Juvenile river herring 1.1 Institution 1.2 Study Sites", " Juvenile River Herring: Diet, habitat, and food resources from the Connecticut River Meghan Slocombe 2023-03-17 Chapter 1 Juvenile river herring River herring (alewife Alosa pseudoharengus and blueback herring A. aestivalis) are anadromous fish and juveniles feed on zooplankton during their residence in freshwater (Figure 1.1). In lakes with high densities of planktivores, juvenile river herring can deplete food resources. These shifting zooplankton densities may influence the growth, health, and emigration timing of juvenile river herring. However, these relationships are not yet fully understood. This research aims to clarify the relationship between juvenile river herring and zooplankton through targeted sampling of three freshwater coves along the Connecticut River. The coves were stratified along the southern portion of the Connecticut river, with Hamburg Cove closest to the mouth, Chapman Pond in the middle, and Wethersfield Cove the furthest upstream. Once per month (June-September of 2019), a combination of juvenile river herring, zooplankton samples, and environmental data were collected. This website provides information on data cleaning, database building, and data analysis. Please email Meghan-Grace Slocombe with any questions. Figure 1.1: Juvenile river herring 1.1 Institution This research was conducted at the University of Massachusetts Amherst to fulfill the honors thesis requirement. 1.2 Study Sites The study sites were Hamburg Cove, Chapman Pond, and Wethersfield Cove (Figure 1.2). Figure 1.2: Map of sampled coves along the Connecticut River, oriented with North at the top "],["database-creation.html", "Chapter 2 Database Creation 2.1 Load required package and initate database building 2.2 Create FISH table 2.3 Create ENVIR table 2.4 Create DIET table 2.5 Create DIET_SIZE table 2.6 Create ZP_BIOMASS table 2.7 Create ZP_SIZE table", " Chapter 2 Database Creation A variety of data was collected for this project; including data specific to individual juvenile river herring, gut content information for each of those fish, specific measurements for individual gut content items, environmental data, zooplankton samples, and specific measurements for individual zooplankton. To better organize and store this data, I have created a database using R and SQL (Figure 2.1). Figure 2.1: Schematic of database design To recreate this database, simply execute the code below. Note, each table is referred to by the title provided to each box in the above figure. 2.1 Load required package and initate database building Load the DBI package into R and create a connection between R and SQLite by creating the database file. library(DBI) #Create Database ---- rh_db &lt;- dbConnect(RSQLite::SQLite(), &quot;../DataClean/rh.db&quot;) 2.2 Create FISH table The fish table includes the following data: fish_id (primary key), month captured, cove captured at, covemonth combination (foreign key), fish age in days, and TL in mm. ##Create fish table in sql dbExecute(rh_db, &quot;CREATE TABLE fish ( fish_id char(5) NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), age_days integer(2), TL_mm integer(2), PRIMARY KEY (fish_id) );&quot;) ##Load fish csv into R fish &lt;- read.csv(&quot;../DataClean/Fish.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(fish) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;fish&quot;, fish, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM fish LIMIT 3;&quot;) 2.3 Create ENVIR table The envir table includes the following data: covemonth (primary key), month, cove, average conductivity (avg_cond), average temperature in Celsius (avg_temp), average percent dissolved oxygen (avg_DOperc), and average milligrams of dissolved oxygen per liter of water (avg_DOmgl). These are averages of measurements taken over a range of water depths. ##Create envir table in sql dbExecute(rh_db, &quot;CREATE TABLE envir ( cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) NOT NULL PRIMARY KEY CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), avg_cond real, avg_temp real, avg_DOperc real, avg_DOmgl real );&quot;) ##Load fish csv into R envir &lt;- read.csv(&quot;../DataClean/Envir.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(envir) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;envir&quot;, envir, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM envir LIMIT 3;&quot;) 2.4 Create DIET table The diet table includes the following data: diet_id (primary key), fish_id (foreign key), lowest possible taxonomic classification of prey (prey_type), prey Order (prey_cat), total number of that type of prey found in the fish, and total biomass (micrograms) of that type of prey found in the fish. ##Create diet table in sql dbExecute(rh_db, &quot;CREATE TABLE diet ( diet_id char(7) PRIMARY KEY NOT NULL, fish_id char(5), prey_type varchar(20), prey_cat varchar(20), total integer(3), preybiomass_microg double, FOREIGN KEY (fish_id) REFERENCES fish(fish_id) );&quot;) ##Load diet csv into R diet &lt;- read.csv(&quot;../DataClean/Diet.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(diet) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;diet&quot;, diet, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM diet LIMIT 3;&quot;) 2.5 Create DIET_SIZE table The diet_size table includes the following data: dietsize_id (primary key), fish_id (foreign key), lowest possible taxonomic classification of prey (prey_type), prey Order (prey_cat), and the total length (micrometers) of the first twenty individuals of that prey type identified in a fish. ##Create diet_size table in sql dbExecute(rh_db, &quot;CREATE TABLE diet_size ( dietsize_id char(11) PRIMARY KEY NOT NULL, fish_id char(5), prey_type varchar(20), prey_cat varchar(20), TL1 double, TL2 double, TL3 double, TL4 double, TL5 double, TL6 double, TL7 double, TL8 double, TL9 double, TL10 double, TL11 double, TL12 double, TL13 doulbe, TL14 double, TL15 double, TL16 double, TL17 double, TL18 double, TL19 double, TL20 double, FOREIGN KEY (fish_id) REFERENCES fish(fish_id) );&quot;) ##Load diet_size csv into R diet_size &lt;- read.csv(&quot;../DataClean/Diet_Size.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(diet_size) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;diet_size&quot;, diet_size, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM diet_size LIMIT 3;&quot;) 2.6 Create ZP_BIOMASS table The zp_biomass table includes the following data: zp_id (primary key), cove, month, covemonth(foreign key), sampling site (approximately three unique sites were sampled at each cove, each month), zooplankton genus, zooplankton family, zooplankton order, the number of individual zooplankton per cubic meter of water, and the biomass of zooplankton (micrograms) per cubic meter of water. ##Create diet table in sql dbExecute(rh_db, &quot;CREATE TABLE zp_biomass ( zp_id char(5) PRIMARY KEY NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), site integer(1), zp_order varchar(20), zp_family varchar(20), zp_genus varchar(20), zp_indiv_per_m3 double, zp_microg_per_m3 double, FOREIGN KEY (covemonth) REFERENCES envir(covemonth) );&quot;) ##Load diet csv into R zp_biomass &lt;- read.csv(&quot;../DataClean/ZP_Biomass.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(zp_biomass) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;zp_biomass&quot;, zp_biomass, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM zp_biomass LIMIT 3;&quot;) 2.7 Create ZP_SIZE table The zp_size table includes the following data: zpsize_id (primary key), cove, month, covemonth(foreign key), sampling site (approximately three unique sites were sampled at each cove, each month), zooplankton genus, zooplankton order, the number of individual zooplankton per cubic meter of water, and the total length (micrometers) of the first twenty individuals of that zooplankton identified at each site at each covemonth combination. ##Create zp_size table in sql dbExecute(rh_db, &quot;CREATE TABLE zp_size ( zpsize_id char(8) PRIMARY KEY NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), site integer(1), zp_type varchar(20), zp_order varchar(20), TL1 double, TL2 double, TL3 double, TL4 double, TL5 double, TL6 double, TL7 double, TL8 double, TL9 double, TL10 double, TL11 double, TL12 double, TL13 doulbe, TL14 double, TL15 double, TL16 double, TL17 double, TL18 double, TL19 double, TL20 double, TL21 double, TL22 double, TL23 double, TL24 double, TL25 double, TL26 double, TL27 double, TL28 double, TL29 double, TL30 double, TL31 double, TL32 double, TL33 double, TL34 double, TL35 double, TL36 double, TL37 double, TL38 double, TL39 double, TL40 double, TL41 double, TL42 double, TL43 double, TL44 double, TL45 double, TL46 double, TL47 double, TL48 double, TL49 double, TL50 double, TL51 double, TL52 double, TL53 double, TL54 double, TL55 double, TL56 double, TL57 double, TL58 double, TL59 double, TL60 double, FOREIGN KEY (covemonth) REFERENCES envir(covemonth) );&quot;) ##Load diet_size csv into R zp_size &lt;- read.csv(&quot;../DataClean/ZP_Size.csv&quot;, stringsAsFactors = FALSE) zp_size[zp_size == &#39;&#39;] &lt;- NA ##Check that names align names(zp_size) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;zp_size&quot;, zp_size, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM zp_size LIMIT 3;&quot;) "],["cross.html", "Chapter 3 Cross-references 3.1 Chapters and sub-chapters 3.2 Captioned figures and tables", " Chapter 3 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 3.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 3. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 3.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 3.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 3.1: Here is a nice figure! Don’t miss Table 3.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 3.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 "],["parts.html", "Chapter 4 Parts", " Chapter 4 Parts You can add parts to organize one or more book chapters together. Parts can be inserted at the top of an .Rmd file, before the first-level chapter heading in that same file. Add a numbered part: # (PART) Act one {-} (followed by # A chapter) Add an unnumbered part: # (PART\\*) Act one {-} (followed by # A chapter) Add an appendix as a special kind of un-numbered part: # (APPENDIX) Other stuff {-} (followed by # A chapter). Chapters in an appendix are prepended with letters instead of numbers. "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2023) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
