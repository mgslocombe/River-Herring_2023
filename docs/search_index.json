[["index.html", "Juvenile River Herring: Diet, habitat, and food resources from the Connecticut River Chapter 1 Juvenile river herring 1.1 Institution 1.2 Study Sites", " Juvenile River Herring: Diet, habitat, and food resources from the Connecticut River Meghan Slocombe 2023-05-01 Chapter 1 Juvenile river herring River herring (alewife Alosa pseudoharengus and blueback herring A. aestivalis) are anadromous fish and juveniles feed on zooplankton during their residence in freshwater (Figure 1.1). In lakes with high densities of planktivores, juvenile river herring can deplete food resources. These shifting zooplankton densities may influence the growth, health, and emigration timing of juvenile river herring. However, these relationships are not yet fully understood. This research aims to clarify the relationship between juvenile river herring and zooplankton through targeted sampling of three freshwater coves along the Connecticut River. The coves were stratified along the southern portion of the Connecticut river. Hamburg Cove is the closest to the mouth of the river, Chapman Pond is in the middle, and Wethersfield Cove is the furthest upstream. Once per month (June-September of 2019), a combination of juvenile river herring, zooplankton samples, and environmental data were collected. This website provides information on data cleaning, database building, and data analysis. Please email Meghan-Grace Slocombe with any questions. Figure 1.1: Juvenile river herring ## [1] &quot;C:/Users/Meghan/OneDrive/Documents/River-Herring_2023/Website&quot; 1.1 Institution This research was conducted at the University of Massachusetts Amherst in fulfillment of Meghan-Grace Slocombeâ€™s honors thesis requirement. 1.2 Study Sites The study sites were Hamburg Cove, Chapman Pond, and Wethersfield Cove (Figure 1.2). Figure 1.2: Map of sampled coves along the Connecticut River, oriented with North at the top "],["database-creation.html", "Chapter 2 Database Creation 2.1 Load required package and initate database building 2.2 Create FISH table 2.3 Create ENVIR table 2.4 Create DIET table 2.5 Create DIET_SIZE table 2.6 Create ZP_BIOMASS table 2.7 Create ZP_SIZE table", " Chapter 2 Database Creation A variety of data was collected for this project; including data specific to individual juvenile river herring, gut content information for each of those fish, specific measurements for individual gut content items, environmental data, zooplankton samples, and specific measurements for individual zooplankton. To better organize and store this data, I have created a database using R and SQL (Figure 2.1). Figure 2.1: Schematic of database design To recreate this database, simply execute the code below. Note, each table is referred to by the title provided to each box in the above figure. 2.1 Load required package and initate database building Load the DBI package into R and initiate a connection between R and SQLite by creating the database file. library(DBI) #Create Database ---- rh_db &lt;- dbConnect(RSQLite::SQLite(), &quot;../DataClean/rh.db&quot;) 2.2 Create FISH table The fish table includes the following data: fish_id (primary key), month captured, cove captured at, covemonth combination (foreign key), fish age in days, and TL in mm. ##Create fish table in sql dbExecute(rh_db, &quot;CREATE TABLE fish ( fish_id char(5) NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), age_days integer(2), TL_mm integer(2), PRIMARY KEY (fish_id) );&quot;) ##Load fish csv into R fish &lt;- read.csv(&quot;../DataClean/Fish.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(fish) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;fish&quot;, fish, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM fish LIMIT 3;&quot;) 2.3 Create ENVIR table The envir table includes the following data: covemonth (primary key), month, cove, average conductivity (avg_cond), average temperature in celsius (avg_temp), average percent dissolved oxygen (avg_DOperc), and average milligrams of dissolved oxygen per liter of water (avg_DOmgl). These are averages of measurements taken over a range of water depths. ##Create envir table in sql dbExecute(rh_db, &quot;CREATE TABLE envir ( cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) NOT NULL PRIMARY KEY CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), avg_cond real, avg_temp real, avg_DOperc real, avg_DOmgl real );&quot;) ##Load fish csv into R envir &lt;- read.csv(&quot;../DataClean/Envir.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(envir) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;envir&quot;, envir, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM envir LIMIT 3;&quot;) 2.4 Create DIET table The diet table includes the following data: diet_id (primary key), fish_id (foreign key), lowest possible taxonomic classification of prey (prey_type), prey Order (prey_cat), total number of that type of prey found in the fish, and total biomass (micrograms) of that type of prey found in the fish. ##Create diet table in sql dbExecute(rh_db, &quot;CREATE TABLE diet ( diet_id char(7) PRIMARY KEY NOT NULL, fish_id char(5), prey_type varchar(20), prey_cat varchar(20), total integer(3), preybiomass_microg double, FOREIGN KEY (fish_id) REFERENCES fish(fish_id) );&quot;) ##Load diet csv into R diet &lt;- read.csv(&quot;../DataClean/Diet.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(diet) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;diet&quot;, diet, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM diet LIMIT 3;&quot;) 2.5 Create DIET_SIZE table The diet_size table includes the following data: dietsize_id (primary key), fish_id (foreign key), lowest possible taxonomic classification of prey (prey_type), prey Order (prey_cat), and the total length (micrometers) of the first twenty individuals of that prey type identified in a fish. ##Create diet_size table in sql dbExecute(rh_db, &quot;CREATE TABLE diet_size ( dietsize_id char(11) PRIMARY KEY NOT NULL, fish_id char(5), prey_tot double, prey_type varchar(20), prey_cat varchar(20), TL1 double, TL2 double, TL3 double, TL4 double, TL5 double, TL6 double, TL7 double, TL8 double, TL9 double, TL10 double, TL11 double, TL12 double, TL13 doulbe, TL14 double, TL15 double, TL16 double, TL17 double, TL18 double, TL19 double, TL20 double, FOREIGN KEY (fish_id) REFERENCES fish(fish_id) );&quot;) ##Load diet_size csv into R diet_size &lt;- read.csv(&quot;../DataClean/Diet_Size.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(diet_size) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;diet_size&quot;, diet_size, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM diet_size LIMIT 3;&quot;) 2.6 Create ZP_BIOMASS table The zp_biomass table includes the following data: zp_id (primary key), cove, month, covemonth(foreign key), sampling site (approximately three unique sites were sampled at each cove, each month), zooplankton genus, zooplankton family, zooplankton order, the number of individual zooplankton per cubic meter of water, and the biomass of zooplankton (micrograms) per cubic meter of water. ##Create zp_biomass table in sql dbExecute(rh_db, &quot;CREATE TABLE zp_biomass ( zp_id char(5) PRIMARY KEY NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), site integer(1), zp_order varchar(20), zp_family varchar(20), zp_genus varchar(20), zp_indiv_per_m3 double, zp_microg_per_m3 double, FOREIGN KEY (covemonth) REFERENCES envir(covemonth) );&quot;) ##Load diet csv into R zp_biomass &lt;- read.csv(&quot;../DataClean/ZP_Biomass.csv&quot;, stringsAsFactors = FALSE) ##Check that names align names(zp_biomass) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;zp_biomass&quot;, zp_biomass, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM zp_biomass LIMIT 3;&quot;) 2.7 Create ZP_SIZE table The zp_size table includes the following data: zpsize_id (primary key), cove, month, covemonth(foreign key), sampling site (approximately three unique sites were sampled at each cove, each month), lowest possible taxonomic classification of zooplankton (zp_type), zooplankton order,and the total length (micrometers) of the first twenty individuals of that zooplankton identified at each site at each covemonth combination. ##Create zp_size table in sql dbExecute(rh_db, &quot;CREATE TABLE zp_size ( zpsize_id char(8) PRIMARY KEY NOT NULL, cove varchar(12) CHECK (cove IN (&#39;chapman&#39;, &#39;wethersfield&#39;, &#39;hamburg&#39;)), month varchar(10) CHECK (month IN (&#39;June&#39;, &#39;July&#39;, &#39;August&#39;, &#39;September&#39;)), covemonth varchar(22) CHECK (covemonth IN (&#39;hamburgAugust&#39;, &#39;hamburgJuly&#39;, &#39;hamburgJune&#39;, &#39;hamburgSeptember&#39;, &#39;wethersfieldJune&#39;, &#39;wethersfieldJuly&#39;, &#39;wethersfieldAugust&#39;, &#39;wethersfieldSeptember&#39;, &#39;chapmanJune&#39;, &#39;chapmanJuly&#39;, &#39;chapmanAugust&#39;, &#39;chapmanSeptember&#39;)), site integer(1), zp_type varchar(20), zp_order varchar(20), TL1 double, TL2 double, TL3 double, TL4 double, TL5 double, TL6 double, TL7 double, TL8 double, TL9 double, TL10 double, TL11 double, TL12 double, TL13 doulbe, TL14 double, TL15 double, TL16 double, TL17 double, TL18 double, TL19 double, TL20 double, TL21 double, TL22 double, TL23 double, TL24 double, TL25 double, TL26 double, TL27 double, TL28 double, TL29 double, TL30 double, TL31 double, TL32 double, TL33 double, TL34 double, TL35 double, TL36 double, TL37 double, TL38 double, TL39 double, TL40 double, TL41 double, TL42 double, TL43 double, TL44 double, TL45 double, TL46 double, TL47 double, TL48 double, TL49 double, TL50 double, TL51 double, TL52 double, TL53 double, TL54 double, TL55 double, TL56 double, TL57 double, TL58 double, TL59 double, TL60 double, FOREIGN KEY (covemonth) REFERENCES envir(covemonth) );&quot;) ##Load diet_size csv into R zp_size &lt;- read.csv(&quot;../DataClean/ZP_Size.csv&quot;, stringsAsFactors = FALSE) zp_size[zp_size == &#39;&#39;] &lt;- NA ##Check that names align names(zp_size) ##Write loaded csv into sql table dbWriteTable(rh_db, &quot;zp_size&quot;, zp_size, append = TRUE) ##Check that data loaded properly dbGetQuery(rh_db, &quot;SELECT * FROM zp_size LIMIT 3;&quot;) "],["data-cleaning.html", "Chapter 3 Data Cleaning 3.1 Load data 3.2 Data prep, fish and prey size 3.3 Data prep, prey selectivity", " Chapter 3 Data Cleaning 3.1 Load data 3.1.1 Load the river herring database and all the tables it contains library(tidyverse) library(DBI) #Load database rh_db &lt;- dbConnect(RSQLite::SQLite(), &quot;../DataClean/rh.db&quot;) #Load tables fish &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM fish;&quot;) envir &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM envir;&quot;) diet &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM diet;&quot;) diet_size &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM diet_size;&quot;) zp_biomass &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM zp_biomass;&quot;) zp_size &lt;- dbGetQuery(rh_db, &quot;SELECT * FROM zp_size;&quot;) 3.2 Data prep, fish and prey size 3.2.1 The steps for the data preparation are as follows: Join the fish and diet size data Calculate the average prey length for each prey type in each fish Calculate the estimated total length for prey items that were not measured (were not within the first 20 of that prey type) for each prey type in each fish Calculate the total prey length for each prey type in each fish Calculate the total prey length for all prey types in each fish Calculate the total number of prey within each fish Calculate the average prey length #Prep fish and prey size data avgfishpreylengthstep1 &lt;- diet_size %&gt;% left_join(fish, by = &quot;fish_id&quot;) %&gt;% #Step 1 mutate(rowavg = rowMeans(subset(diet_size, select = c(6:25)), na.rm = TRUE)) %&gt;% #Step 2 mutate(over20bm = if_else(prey_tot&gt;20, (prey_tot-20)*(rowavg), 0)) #Step 3 avgfishpreylength &lt;- avgfishpreylengthstep1 %&gt;% mutate(preylengthsum = rowSums(subset(avgfishpreylengthstep1, #Step 4 select = c(6:25,32)), na.rm = TRUE)) %&gt;% group_by(fish_id) %&gt;% mutate(fishpreylength = sum(preylengthsum)) %&gt;% #Step 5 mutate(fishpreytot = sum(prey_tot)) %&gt;% #Step 6 mutate(fishavgpreylength = fishpreylength/fishpreytot) #Step 7 3.3 Data prep, prey selectivity 3.3.1 The steps for the zooplankton data preparation are as follows: Calculate total number of sites sampled in cove for that month Calculate the average number of individuals per zooplankton category across sampling sites for each cove month combo Calculate the total number of individuals for each zooplankton category sampled at each cove month combo Calculate the total number of individuals sampled at each cove month combo Calculate the percent of the total number of indiviuals that each zooplankton category is for each cove month combo Simplify data set to needed columns and rows Add a column stating that this is water column data Rename zp_order to category #Prep the water column data zpwc &lt;- zp_biomass %&gt;% group_by(covemonth) %&gt;% mutate(sites_tot = length(unique(site))) %&gt;% ungroup() %&gt;% #Step 1 group_by(covemonth, zp_genus) %&gt;% mutate(cmavgindiv = sum(zp_indiv_per_m3)/sites_tot) %&gt;% select(-c(zp_id, site, zp_indiv_per_m3, zp_microg_per_m3)) %&gt;% distinct() %&gt;% ungroup() %&gt;% #Step 2 group_by(covemonth, zp_order) %&gt;% mutate(cattot = sum(cmavgindiv)) %&gt;% ungroup() %&gt;% #Step 3 group_by(covemonth) %&gt;% mutate(covmonthtot = sum(cmavgindiv)) %&gt;% ungroup %&gt;% #Step 4 mutate(perctot = cattot/covmonthtot) %&gt;% #Step 5 select(1:4, 11) %&gt;% distinct() %&gt;% #Step 6 mutate(gutwater = &quot;water column&quot;) %&gt;% #Step 7 rename(category = zp_order) #Step 8 3.3.2 The steps for the prey data preparation are as follows: Join fish data to diet data Calculate the total number of prey individuals for each prey category sampled at each cove month combo Calculate the total number of prey individuals sampled at each cove month combo Calculate the percent of the total number of prey that each zooplankton category is for each cove month combo Simplify data set to needed columns and rows Add a column stating that this is gut content data Reorder the columns to desired structure Rename prey_cat to category #Prep the gut content data zpgc &lt;- diet %&gt;% left_join(fish, by = &quot;fish_id&quot;) %&gt;% #Step 1 group_by(covemonth, prey_cat) %&gt;% mutate(cattot = sum(total)) %&gt;% ungroup() %&gt;% #Step 2 group_by(covemonth) %&gt;% mutate(covmonthtot = sum(total)) %&gt;% ungroup() %&gt;% #Step 3 mutate(perctot = cattot/covmonthtot) %&gt;% #Step 4 select(4, 7:9, 14) %&gt;% distinct() %&gt;% #Step 5 mutate(gutwater = &quot;gut&quot;) %&gt;% #Step 6 relocate(prey_cat, .after = covemonth) %&gt;% #Step 7 rename(category = prey_cat) #Step 8 3.3.3 The steps for combining the data sets are as follows: Bind the two datasets Filter the dataset to only include the top four categoriesâ€” Cladocera, Ostracoda, Copepoda, Ploima Factor the month levels Factor the cove levels #Create data set with water column and gut content data zpwcgc &lt;- rbind(zpwc, zpgc) %&gt;% filter(category == &quot;Cladocera&quot; | category == &quot;Ostracoda&quot; | category == &quot;Copepoda&quot; | category == &quot;Ploima&quot;) zpwcgc$month &lt;- factor(zpwcgc$month, levels = c(&quot;June&quot;, &quot;July&quot;, &quot;August&quot;, &quot;September&quot;)) zpwcgc$cove &lt;- factor(zpwcgc$cove, levels = c(&quot;wethersfield&quot;, &quot;chapman&quot;, &quot;hamburg&quot;)) "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
